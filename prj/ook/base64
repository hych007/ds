#ifndef __OOK_BASE64__
#define __OOK_BASE64__

#include <ook/base64.h>

extern "C" {
	#include "mem.h"
}

///////////////////////
// base64_decoder

class base64_decoder
{
public:
	base64_decoder(const char * base64str = NULL)
		: _decbuff(NULL),
		  _decsize(0)
	{
		if(base64str)
			decode(base64str);
	}
	~base64_decoder()
	{
		free__(_decbuff);
	}
	
	const char * c_str()           { return _decbuff; }
	const unsigned char * c_ustr() { return (const unsigned char *)_decbuff; }
	int length()                   { return _decsize; }
	
	bool decode(const char * base64str)
	{
		if(!base64str)
			return false;
		
		int len = strlen(base64str);
		if(len == 0)
			return false;
		
		char * bufin = (char *)malloc__(len + 2);
		if(!bufin)
			return false;
		
		strcpy(bufin, base64str);

		if(_decbuff)
			free__(_decbuff);
		_decbuff = (char *)malloc__(len + 2);
		if(!_decbuff)
			return false;
		
		int r = base64_decode((unsigned char *)bufin, (unsigned char *)_decbuff, len);
		if(r < 1)
		{
			free__(bufin);
			return false;
		}
			
		_decbuff[r] = 0;
		_decsize = r;
		
		free__(bufin);
		return true;
	}

private:
	char * _decbuff;
	int _decsize;
};

///////////////////////
// base64_encoder

class base64_encoder
{
public:
	base64_encoder(const unsigned char * buf_ptr = NULL, unsigned int buf_len = 0)
		: _encbuff(NULL),
		  _encsize(0)
	{
		encode(buf_ptr, buf_len);
	}
	~base64_encoder()
	{
		free__(_encbuff);
	}
	
	const char * c_str()           { return _encbuff; }
	const unsigned char * c_ustr() { return (const unsigned char *)_encbuff; }
	int length()                   { return _encsize; }
	
	bool encode(const unsigned char * buf_ptr, unsigned int buf_len)
	{
		if(!buf_ptr)
			return false;
		
		if(buf_len < 1)
			return false;
		
		int len = buf_len;
		
		unsigned char * inbuff = (unsigned char *)malloc(len + 8);
		if(!inbuff)
			return false;	
		memcpy(inbuff, buf_ptr, len);
		memset(inbuff + len, 0, 8);
		
		if(_encbuff)
			free__(_encbuff);
		_encbuff = (char *)malloc__((len << 1) + 8);
		if(!_encbuff)
			return false;
		
		int r = base64_encode(inbuff, (unsigned char *)_encbuff, len);
		free(inbuff);
		
		if(r < 1)
			return false;

		_encbuff[r] = 0;
		_encsize = r;
		return true;
	}

private:
	char * _encbuff;
	int _encsize;
};

#endif
